---
- name: generic ovpn client management | extract_data | Read file contents
  slurp:
    src: "{{ item.path }}"
  register: file_content

- name: generic ovpn client management | extract_data | Extract hostname and IP address
  set_fact:
    hostname: "{{ item.path | basename | regex_replace('(.*)\\.conf$', '\\1') }}"
    ip_address: "{{ file_content.content | b64decode | regex_search('ifconfig-push ([0-9.]+)', '\\1') }}"

- name: generic ovpn client management | extract_data | Add client data to the list
  set_fact:
    client_data: "{{ client_data + [{'hostname': hostname, 'ip_address': ip_address}] }}"




- name: generic ovpn client management | extract_data | Test client activity with ping
  command: ping -c 3 {{ item.ip_address[0] }}
  ignore_errors: yes
  with_items: "{{ client_data }}"
  register: ping_result
  

- name: generic ovpn client management | extract_data | Update client_data with activity status
  set_fact:
    client_data: "{{ client_data | default([]) }}"
  vars:
    ping_results: "{{ ping_result.results }}"
  loop: "{{ ping_results }}"
  loop_control:
    loop_var: result
  when: result.rc == 0

- name: Get OpenVPN client certificate expiration dates
  shell: "openssl x509 -enddate -noout -in /etc/openvpn/easy-rsa/pki/issued/{{ item.hostname }}.crt"
  loop: "{{ client_data }}"
  register: cert_expiry_dates
- name: Get OpenVPN client certificate start dates
  shell: "openssl x509 -startdate -noout -in /etc/openvpn/easy-rsa/pki/issued/{{ item.hostname }}.crt"
  loop: "{{ client_data }}"
  register: cert_start_dates


- name: generic ovpn client management | extract date | Check if output client_sh_folder folder exist
  stat:
    path: "{{ client_sh_folder }}"
  register: client_sh_folder_info
  delegate_to: localhost
  tags:
    - client_keys

- name: generic ovpn client management | extract date | client_sh_folder dir exists
  ansible.builtin.file:
    path: "{{ client_sh_folder }}"
    state: directory
  delegate_to: localhost
  when: not client_sh_folder_info.stat.exists  
  tags: 
    - package

# - name: Copy all files from remote server to local workspace
#   fetch:
#     src: /etc/openvpn/client_sh/  # Path on the remote server
#     dest: "{{ client_sh_folder }}"  # Local destination path
#     flat: no


- name: generic ovpn client management | extract_data | Gather OpenVPN client configurations shell
  ansible.builtin.find:
    paths: "/etc/openvpn/client_sh/"
    recurse: no
    patterns: "*"
  register: files_to_copy




- name: Copy files to local workspace
  fetch:
    src: "{{ item.path }}"  # Path on the remote server
    dest: "{{ client_sh_folder }}"  # Local destination path
  with_items: "{{ files_to_copy.stdout_lines }}"
  flat: yes  # Ensure flat copy to prevent creating subfolders


# - name: Copy all files from remote server to local workspace
#   synchronize:
#     src: /etc/openvpn/client_sh/  # Remote directory
#     dest: "{{ client_sh_folder }}"  # Local directory
#     rsync_opts: 
#       - "--archive"  # Preserve file attributes, times, etc.
#       - "--delete"  # Delete files in the destination that are not in the source (optional)



# - name: generic ovpn client management | extract_data | Find Certificate Expiration Date
#   command: openssl x509 -noout -enddate -in {{ openvpn_path_certs }}/{{ item.hostname }}.crt
#   register: certificate_expiration
#   with_items: "{{ client_data }}"
#   loop_control:
#     label: "{{ item.hostname }}"

# - name: generic ovpn client management | extract_data | Extract Expiration Date
#   set_fact:
#     item.expiration_date: "{{ certificate_expiration.stdout | regex_replace('.*notAfter=(.*)$', '\\1') }}"
#   with_items: "{{ client_data }}"
#   loop_control:
#     label: "{{ item.hostname }}"
